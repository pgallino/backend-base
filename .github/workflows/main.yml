# Nombre del Workflow (aparece en GitHub)
name: Code Quality Checks - Tests

# Define cuándo se ejecuta el workflow
on:
  push:
    branches: [ main ] # Se ejecuta en cada push a la rama principal
  pull_request:
    branches: [ main ] # Se ejecuta en cada PR hacia la rama principal

jobs:
  check-quality:
    name: Checks + Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' 

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run format & types (make check)
        run: make check

      - name: Run tests (make test)
        run: make test
        env:
          PROJECT_NAME: BackendBase
          ENVIRONMENT: test
      - name: Upload coverage report (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  deploy-render:
    name: Deploy to Render
    needs: check-quality
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Trigger Render deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail
          RESP=$(curl -s -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json")
          echo "Trigger response: $RESP"
          DEPLOY_ID=$(echo "$RESP" | jq -r '.id')
          if [ -z "${DEPLOY_ID}" ] || [ "${DEPLOY_ID}" = "null" ]; then
            echo "Failed to trigger deploy"; exit 1
          fi
          echo "DEPLOY_ID=${DEPLOY_ID}" >> "$GITHUB_ENV"

      - name: Wait until live
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          set -euo pipefail
          ATTEMPTS=0
          MAX_ATTEMPTS=120   # ~20 min
          SLEEP=10
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            STATUS_JSON=$(curl -s -H "Authorization: Bearer ${RENDER_API_KEY}" \
              "https://api.render.com/v1/deploys/${DEPLOY_ID}")
            STATUS=$(echo "$STATUS_JSON" | jq -r '.status')
            echo "Deploy status: $STATUS (attempt ${ATTEMPTS})"
            case "$STATUS" in
              live) echo "✅ Deploy is live"; exit 0 ;;
              failed|canceled) echo "❌ Deploy failed: $STATUS_JSON"; exit 1 ;;
              *) sleep $SLEEP; ATTEMPTS=$((ATTEMPTS+1));;
            esac
          done
          echo "❌ Timeout waiting for Render deploy"; exit 1

      - name: Summary
        run: echo "✅ CI + Deploy OK"